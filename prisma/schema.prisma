// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL") // Uses Vercel's POSTGRES_PRISMA_URL
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Custom fields for credits
  credits         Int             @default(0)
  creditPurchases CreditPurchase[]
  creditSpends    CreditSpend[]
  creditAdjustments CreditAdjustment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Models for Credit System
model CreditPurchase {
  id                    String      @id @default(cuid())
  userId                String
  user                  User        @relation(fields: [userId], references: [id])
  stripePaymentIntentId String      @unique // For idempotency
  creditsPurchased      Int
  amountPaid            Int         // In cents
  currency              String      // e.g., "usd"
  timestamp             DateTime    @default(now())
}

model CreditSpend {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  featureUsed  String   // e.g., "imageGeneration", "textGeneration"
  creditsSpent Int
  timestamp    DateTime @default(now())
}

model CreditAdjustment {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  amount       Int      // Can be positive (add) or negative (deduct)
  reason       String   // e.g., "Refund for order X", "Promotional credits"
  adminUserId  String?  // ID of admin who made the adjustment, if applicable
  timestamp    DateTime @default(now())
}
